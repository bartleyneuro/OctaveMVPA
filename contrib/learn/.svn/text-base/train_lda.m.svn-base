function [scratch] = train_lda(trainpats,traintargs,in_args,cv_args)

% USAGE :
% function [scratch] = train_lda(trainpats,traintargs,in_args,cv_args)
%
% This is a support vector machine training function. It train the
% classifier and makes is ready for testing. 
% NOTE : This classfier currently does only two category classification
% onlyfunction [scratch] = train_lda(trainpats,traintargs,in_args,cv_args). We have to implement the multi-class classification.
% Make sure you pass in only two regressors  
%
% You need to call TEST_SVM afterwards to assess how well this
% generalizes to the test data.
%
% This function internally uses the svm library generated by the
% Jaochims. This function is a wrapper script that converts the
% subj struture into the form required by this library.

% PATS = nFeatures x nTimepoints
% TARGS = nOuts x nTimepoints
%
% SCRATCH contains all the other information that you might need when
% analysing the network's output, most of which is specific to
% backprop. Some of this information is redundantly stored in multiple
% places. This gets referred to as SCRATCHPAD outside this function
%
% The classifier functions use a IN_ARGS structure to store possible
% arguments (rather than a varargin and property/value pairs). This
% tends to be easier to manage when lots of arguments are
% involved. xxx
%
% IN_ARGS are the various arguments that can be passed in for type
% of kernels used and the learning parameters.
%
% IN_ARGS: 
%  1] in_args.kernel_type = 0 'LINEAR'
%  2] in_args.kernel_type = 1 'POLYNOMIAL'
%  3] in_args.kernel_type = 2 'RBF (Radial Basis Function)'
%  4] in_args.kernel_type = 4 'SIGMOID'
%
%
%
% This is part of the Princeton MVPA toolbox, released under the
% GPL. See http://www.csbmb.princeton.edu/mvpa for more
% information.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SORT ARGUMENTS

defaults.temp='';

% Args contains the default args, unless the user has over-ridden them
args = add_struct_fields(in_args,defaults);
scratch.class_args = args;
args = sanity_check(trainpats,traintargs,args);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SETTING THINGS UP
% This classifier needs the two caterogies to in the form of +/- 1 
% in this step we will convert catergory 1 into all the 1 and
% category 2 into -1


[train_max_val train_max_idx]  = max(traintargs);
train_max_idx(train_max_idx == 1) = 1;
train_max_idx(train_max_idx == 2) = 2;
scratch.nOut = size(traintargs,1);
scratch.outidx = [1:scratch.nOut];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% *** Feeding the scratch with training stuff ***

scratch.trainpats = trainpats;
scratch.train_max_idx = train_max_idx;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [args] = sanity_check(trainpats,traintargs,args)

if size(trainpats,2)==1
  error('Can''t classify a single timepoint');
end

if size(trainpats,2) ~= size(traintargs,2)
  error('Different number of training pats and targs timepoints');
end

if size(traintargs,1) ~= 2 
  error('Cannot classify more than two categories');  
end 


[isbool isrest isoveractive] = check_1ofn_regressors(traintargs);
if ~isbool || isrest || isoveractive
  if ~args.ignore_1ofn
    warning('Not 1-of-n regressors');
  end
end


 
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
